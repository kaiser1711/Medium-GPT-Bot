import logging
import logging.handlers
import config

class TlsSMTPHandler(logging.handlers.SMTPHandler):
    def emit(self, record):
        """
        Emit a record.
 
        Format the record and send it to the specified addressees.
        """
        try:
            import smtplib
            import string # for tls add this line
            try:
                from email.utils import formatdate
            except ImportError:
                formatdate = self.date_time
            port = self.mailport
            if not port:
                port = smtplib.SMTP_PORT
            smtp = smtplib.SMTP(self.mailhost, port)
            msg = self.format(record)
            msg = "From: %s\r\nTo: %s\r\nSubject: %s\r\nDate: %s\r\n\r\n%s" % (
                            self.fromaddr,
                            string.join(self.toaddrs, ","),
                            self.getSubject(record),
                            formatdate(), msg)
            if self.username:
                smtp.ehlo() # for tls add this line
                smtp.starttls() # for tls add this line
                smtp.ehlo() # for tls add this line
                smtp.login(self.username, self.password)
            smtp.sendmail(self.fromaddr, self.toaddrs, msg)
            smtp.quit()
        except (KeyboardInterrupt, SystemExit):
            raise
        except:
            self.handleError(record)
 
logger = logging.getLogger()
 
gm = TlsSMTPHandler(("smtp.gmail.com", 587), config.email, [config.email,], 'Error found!',(config.email, config.email_password))
gm.setLevel(logging.ERROR)
 
logger.addHandler(gm)

try:
    import os
    import openai
    import tweepy
    import datetime
    import subprocess
    import random

    #parse already existing blog posts
    dir_list = [f for f in os.listdir('./') if f.endswith('.md')]
    for j,s in enumerate(dir_list):
      s = ''.join([i for i in s  if not i.isdigit()])
      s = s.replace(" -.md", "")
      dir_list[j]=s


    #generate title of blog post
    openai.api_key = config.API_KEY

    model_engine = "text-davinci-003" 

    random.shuffle(dir_list)

    #prompt = "Generate a random title for a medium blog post. Do not use exact or similar titles from the following list:" + str(dir_list)
    prompt = "Generate a random title for a medium blog post:"


    completion = openai.Completion.create( engine=model_engine, prompt=prompt, max_tokens=100, n=1, stop=None, temperature=0.8)
    title=completion.choices[0].text
    title=title.replace('"', '')
    title=title.replace('\n', '')
    print(title)

    #generate blog post
    prompt = "Write a blog post about" + title
    completion = openai.Completion.create( engine=model_engine, prompt=prompt, max_tokens=4000 , n=1, stop=None, temperature=0.6)

    text="# " + title + completion.choices[0].text
    text=text.replace('\n', '\n ')
    text=text + "\n \n  **This blog post was generated by OpenAI's text-davinci engine**"

    #save text in file 
    date = datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
    filename=title + ' ' + date +".md"
    text_file = open(filename, "w")
    n = text_file.write(text)
    text_file.close()

    #post on medium
    link=subprocess.check_output(["python3", "publish.py", filename, "--title",title, '--pub', 'public'])

    print(link)

    #post on twitter
    client = tweepy.Client( bearer_token=config.bearer_token,
                            consumer_key=config.consumer_key, 
                            consumer_secret=config.consumer_secret, 
                            access_token=config.access_token, 
                            access_token_secret=config.access_token_secret, 
                            wait_on_rate_limit=True)

    tweets = client.create_tweet(text = 'I just published ' + title + " " + link.decode())

except:
    logger.exception('Unhandled exception')